{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/btc-dascient-llc?scriptVersionId=216325891\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Bitcoin, EMA-23, and Kalman Filter\n### By ΔΦ\n\n- save script below.py\n- open terminal\n- locate below.py\n> python below.py\n\n\n## [@donutz.ai](www.donutz.ai/#)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2025-01-05T23:32:11.417177Z","iopub.execute_input":"2025-01-05T23:32:11.417554Z","iopub.status.idle":"2025-01-05T23:32:15.537838Z","shell.execute_reply.started":"2025-01-05T23:32:11.41751Z","shell.execute_reply":"2025-01-05T23:32:15.53641Z"}}},{"cell_type":"code","source":"from IPython.display import clear_output\n!pip install numpy pandas matplotlib filterpy plotly chart-studio\nclear_output()\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom filterpy.kalman import KalmanFilter\nfrom datetime import datetime, timedelta\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.offline as pyoff\nfrom chart_studio import plotly\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True) \n\n# Generate dummy Bitcoin price data (you can replace this with live data)\nnp.random.seed(42)\ndates = pd.date_range(start=datetime.now() - timedelta(days=50), periods=50).strftime('%Y-%m-%d')\nprice = np.random.normal(loc=50000, scale=3000, size=50)  # Simulate Bitcoin price data\n\n# Convert data to a pandas DataFrame\ndata = pd.DataFrame({'Date': dates, 'Price': price})\ndata['Date'] = pd.to_datetime(data['Date'])\n\n# --- Step 1: Calculate Exponential Moving Average (EMA-23) ---\ndef calculate_ema(data, window=23):\n    return data['Price'].ewm(span=window, adjust=False).mean()\n\ndata['EMA_23'] = calculate_ema(data)\n\n# --- Step 2: Kalman Filter ---\ndef apply_kalman_filter(data):\n    # Define the Kalman filter\n    kf = KalmanFilter(dim_x=1, dim_z=1)\n    kf.x = np.array([data['Price'][0]])  # initial state estimate\n    kf.P *= 1000.  # initial uncertainty\n    kf.F = np.array([[1]])  # state transition matrix\n    kf.H = np.array([[1]])  # observation matrix\n    kf.R = np.array([[5]])  # measurement noise\n    kf.Q = np.array([[0.01]])  # process noise\n\n    kalman_filtered = []\n    \n    for price in data['Price']:\n        kf.predict()\n        kf.update(price)\n        kalman_filtered.append(kf.x[0])\n    \n    return kalman_filtered\n\ndata['Kalman_Filtered'] = apply_kalman_filter(data)\n\n# --- Step 3: Interactive Plot (Plotly) ---\nfig = go.Figure()\n\n# Bitcoin Price Line\nfig.add_trace(go.Scatter(x=data['Date'], y=data['Price'], mode='lines', name='Bitcoin Price', line=dict(color='lightblue', width=2)))\n\n# EMA-23 Line\nfig.add_trace(go.Scatter(x=data['Date'], y=data['EMA_23'], mode='lines', name='EMA-23', line=dict(color='orange', width=2, dash='dash')))\n\n# Kalman Filtered Line\nfig.add_trace(go.Scatter(x=data['Date'], y=data['Kalman_Filtered'], mode='lines', name='Kalman Filtered', line=dict(color='lightgreen', width=2, dash='dot')))\n\n# Layout\nfig.update_layout(\n    title=\"Bitcoin Price, EMA-23 & Kalman Filter\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Price in USD\",\n    template=\"plotly_dark\",\n    xaxis_rangeslider_visible=True\n)\nfig.show()\n\n# --- Step 4: Display the last Bitcoin price ---\nprint(f\"Last recorded Bitcoin price: ${data['Price'].iloc[-1]:.2f}\")\nprint(f\"EMA-23 for last price: ${data['EMA_23'].iloc[-1]:.2f}\")\nprint(f\"Kalman Filter Estimate for last price: ${data['Kalman_Filtered'].iloc[-1]:.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T08:49:22.213511Z","iopub.execute_input":"2025-01-06T08:49:22.213813Z","iopub.status.idle":"2025-01-06T08:49:32.455563Z","shell.execute_reply.started":"2025-01-06T08:49:22.213782Z","shell.execute_reply":"2025-01-06T08:49:32.453877Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-7af6388ba72d>\u001b[0m in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mfilterpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkalman\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mKalmanFilter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mdatetime\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimedelta\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mplotly\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplotly\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mplotly\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraph_objs\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mplotly\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moffline\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpyoff\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/plotly/plotly/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0m_plotly_future_\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0m_chart_studio_error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0m_chart_studio_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"plotly\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/_plotly_future_/__init__.py\u001b[0m in \u001b[0;36m_chart_studio_error\u001b[0;34m(submodule)\u001b[0m\n\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_chart_studio_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubmodule\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m     raise ImportError(\n\u001b[0m\u001b[1;32m     44\u001b[0m         \"\"\"\n\u001b[1;32m     45\u001b[0m \u001b[0mThe\u001b[0m \u001b[0mplotly\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0msubmodule\u001b[0m\u001b[0;34m}\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mdeprecated\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: \nThe plotly.plotly module is deprecated,\nplease install the chart-studio package and use the\nchart_studio.plotly module instead. \n"],"ename":"ImportError","evalue":"\nThe plotly.plotly module is deprecated,\nplease install the chart-studio package and use the\nchart_studio.plotly module instead. \n","output_type":"error"}],"execution_count":1},{"cell_type":"code","source":"# en fin","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}