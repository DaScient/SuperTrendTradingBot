{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/donutz-ai-tier-1?scriptVersionId=215715416\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# go away!\n\n[Portfolio Management](www.donutz.ai)","metadata":{}},{"cell_type":"code","source":"from IPython.display import clear_output\n!pip install pandas_ta,schedule,pykalman\nclear_output()\nimport schedule,warnings,smtplib,random\nfrom pykalman import KalmanFilter\nfrom dateutil.tz import tzlocal\nfrom datetime import datetime\nfrom decimal import Decimal\nfrom random import randint\nfrom random import seed\nimport pandas_ta as ta\nimport pandas as pd\nimport numpy as np\nwarnings.filterwarnings('ignore')\nrand = random.randint(1,23)","metadata":{"trusted":true,"_kg_hide-input":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"if rand < 13:\n    tick='btc'#input(\"crypto ticker:\")\nelse:\n    tick='shib'\nif tick=='btc':\n    df = pd.read_csv('https://www.cryptodatadownload.com/cdd/Binance_BTCUSDT_1h.csv',header=1)\n    df.Close.tail(200).plot(figsize=(25,7))\nif tick=='shib':\n    df = pd.read_csv('https://www.cryptodatadownload.com/cdd/Binance_SHIBUSDT_1h.csv',header=1)\n    df.Close.tail(200).plot(figsize=(25,7))\n#if tick=='pepe':\n#    df = pd.read_csv('https://www.cryptodatadownload.com/cdd/Binance_PEPEUSDT_1h.csv',header=1)\n#    df.Close.tail(200).plot(figsize=(25,7))\nCARRIERS = {\"att\": \"@mms.att.net\",\n    \"tmobile\": \"@tmomail.net\",\n    \"verizon\": \"@vtext.com\",\n    \"sprint\": \"@messaging.sprintpcs.com\"}\nif rand < 13:\n    EMAIL = \"existentialkingdom@gmail.com\"\n    PASSWORD = \"vwzk voak mcfh huee\"\nelse:\n    EMAIL = \"aristocles24@gmail.com\"\n    PASSWORD = \"odxx ontt dgbz nabo\"\nprint(f\"served by: {EMAIL[:4]}\")","metadata":{"trusted":true,"_kg_hide-input":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def send_message(phone_number, carrier, message):\n    recipient = phone_number + CARRIERS[carrier]\n    auth = (EMAIL, PASSWORD)\n    server = smtplib.SMTP(\"smtp.gmail.com\", 587)\n    server.starttls()\n    server.login(auth[0], auth[1])\n    server.sendmail(auth[0], recipient, message)\ndef supertrend(df):\n    df['close'] = df['Close']\n    df['low'] = df['Low']\n    df['high'] = df['High']\n    df['open'] = df['Open']\n    close = df['close'][len(df)-1]\n    low = df['low'][len(df)-1]\n    kf = KalmanFilter(transition_matrices = [1],    # The value for At. It is a random walk so is set to 1.0\n                      observation_matrices = [1],   # The value for Ht.\n                      initial_state_mean = 0,       # Any initial value. It will converge to the true state value.\n                      initial_state_covariance = 1, # Sigma value for the Qt in Equation (1) the Gaussian distribution\n                      observation_covariance=1,     # Sigma value for the Rt in Equation (2) the Gaussian distribution\n                      transition_covariance=.01)    # A small turbulence in the random walk parameter 1.0\n    state_means, _ = kf.filter(df['close'].values)\n    df['kf_mean'] = np.array(state_means)\n    kalman = df.kf_mean[len(df)-1]\n    aboveKalman = low > kalman\n    ema_13 = df.ta.ema(13, append=True)[-1:].reset_index(drop=True)[0]\n    ema_31 = df.ta.ema(31, append=True)[-1:].reset_index(drop=True)[0]\n    ema_crossover  = ema_13 > kalman\n    bbl_14 = df.ta.bbands(length=14, append=True)[['BBL_14_2.0']].tail(1).values[0][0]\n    bbu_14 = df.ta.bbands(length=14, append=True)[['BBU_14_2.0']].tail(1).values[0][0]\n    bband_buy = close < bbl_14\n    bband_sell = close > bbu_14\n    isa_9 = df.ta.ichimoku()[1]['ISA_9'].tail(1).values[0] # help(ta.ichimoku)\n    isb_26 = df.ta.ichimoku()[1]['ISB_26'].tail(1).values[0]\n    amat = (df.ta.amat()['AMATe_LR_8_21_2'].tail(1).values[0] == 1)\n    rsi = df.ta.rsi()[len(df)-1]\n    rsi_buy = rsi < 35\n    rsi_sell = rsi > 65\n    try:chop = \"{:.2f}\".format(df.ta.chop()[len(df.ta.chop())-1]) \n    except RunTimeWarning:chop = 0\n    buy = ema_13 > kalman\n    sell = ema_13 < kalman\n    return df, close, isa_9, isb_26, chop, rsi, ema_crossover, buy, sell, aboveKalman\ndef plot(df,symbol):\n    fig = go.Figure(go.Candlestick(x=df.index,open=df['open'],high=df['high'],low=df['low'],close=df['close'],name=symbol))\n    fig.add_trace(go.Scatter(x=df.index,y=df['kf_mean'],opacity=0.7,line=dict(color='purple', width=2),name='Kalman Filter'))\n    fig.add_trace(go.Scatter(x=df.index,y=df['EMA_13'],opacity=0.7,line=dict(color='orange', width=2),name='EMA_13'))\n    fig.add_trace(go.Scatter(x=df.index,y=df['EMA_31'],opacity=0.7,line=dict(color='lightblue', width=2),name='EMA_31 '))\n    fig.update_layout(title=f'Ticker: {symbol}')\n    fig.update_layout(xaxis_rangeslider_visible=False)\n    return fig.show()","metadata":{"trusted":true,"_kg_hide-input":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def run_bot():\n    print(\"\\ndatetime:\",pd.Timestamp.now())\n    techs = supertrend(df)\n    if techs[7]:\n        print(f\"prev.close:{techs[1]:.10g}\")\n        print(f\"Decimal(str({techs[1]}))\")\n        print(f\"buy {tick}\")\n        print(f\"chop:{techs[4]}\")\n        print(f\"rsi:{techs[5]}\")\n        send_message(\"3016750611\",\"tmobile\",f\"buy {tick}\")\n    if techs[8]:\n        print(f\"prev.close:{techs[1]:.10g}\")\n        print(f\"Decimal(str({techs[1]}))\")\n        print(f\"sell {tick}\")\n        print(f\"chop:{techs[4]}\")\n        print(f\"rsi:{techs[5]}\")\n        send_message(\"3016750611\",\"tmobile\",f\"sell {tick}\")\nschedule.every(3).seconds.do(run_bot)\nwhile True:\n    schedule.run_pending()\n    time.sleep(0)","metadata":{"trusted":true,"_kg_hide-input":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#en fin","metadata":{"trusted":true,"_kg_hide-input":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Supplement","metadata":{"_kg_hide-input":false}},{"cell_type":"code","source":"chart=df.Close.tail(200).plot(figsize=(25,7))\n\nimport os\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.image import MIMEImage\nfrom email.mime.multipart import MIMEMultipart\n\n\ndef SendMail(ImgFileName):\n    with open(ImgFileName, 'rb') as f:\n        img_data = f.read()\n\n    msg = MIMEMultipart()\n    msg['Subject'] = 'photo'\n    msg['From'] = 'existentialkingdom@gmail.com'\n    msg['To'] = '3016750611@tmomail.net'\n\n    text = MIMEText(\"test\")\n    msg.attach(text)\n    image = MIMEImage(chart, name=os.path.basename(ImgFileName))\n    msg.attach(image)\n\n    s = smtplib.SMTP(Server, Port)\n    s.ehlo()\n    s.starttls()\n    s.ehlo()\n    s.login(\"existentialkingdom@gmail.com\", \"vwzk voak mcfh huee\")\n    s.sendmail(From, To, msg.as_string())\n    s.quit()","metadata":{"trusted":true,"_kg_hide-input":true},"outputs":[],"execution_count":null}]}