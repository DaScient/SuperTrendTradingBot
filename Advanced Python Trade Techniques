{"metadata":{"kernelspec":{"name":"","display_name":""},"language_info":{"name":""}},"nbformat_minor":5,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/advanced-python-techniques?scriptVersionId=218942768\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"id":"588f2afa","cell_type":"markdown","source":"# **Advanced Cryptocurrency Trading System**\n\n## **Introduction**\nWelcome to the most comprehensive trading system designed to maximize profits using AI, ML, and automated trading with Binance API.\n\nThis notebook covers:\n- Market analysis with `pandas_ta`\n- Reinforcement learning strategies\n- Real-time automated trade execution\n- Risk management and financial planning\n\nLet's dive into building an efficient, modern, and high-tech trading ecosystem.","metadata":{}},{"id":"11acc573","cell_type":"markdown","source":"## **1. Install Required Libraries**\n\nBefore proceeding, ensure the following packages are installed:\n\n```python\n!pip install pandas pandas_ta numpy requests binance stable-baselines3 plotly scikit-learn talib\n```","metadata":{}},{"id":"85806a7c","cell_type":"code","source":"import pandas as pd\nimport pandas_ta as ta\nimport numpy as np\nimport requests\nimport time\nimport plotly.graph_objects as go\nfrom binance.client import Client\nfrom binance.enums import *\nfrom stable_baselines3 import PPO\nfrom gym import spaces\nimport logging\nimport os\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Load API keys\nAPI_KEY = os.getenv('BINANCE_API_KEY', 'your_api_key_here')\nAPI_SECRET = os.getenv('BINANCE_API_SECRET', 'your_api_secret_here')\n\nclient = Client(API_KEY, API_SECRET)","metadata":{},"outputs":[],"execution_count":null},{"id":"0858a8db","cell_type":"markdown","source":"## **2. Data Retrieval and Preprocessing**\n\nFetching historical cryptocurrency data is a crucial step. We'll retrieve and preprocess data from Binance.\n\n### Function to Retrieve Market Data","metadata":{}},{"id":"1e6a67f6","cell_type":"code","source":"def get_binance_data(symbol=\"BTCUSDT\", interval=Client.KLINE_INTERVAL_1HOUR, lookback=\"30 day ago UTC\"):\n    \"\"\"Retrieve historical data from Binance and preprocess\"\"\"\n    logging.info(f\"Fetching data for {symbol} at {interval}\")\n    klines = client.get_historical_klines(symbol, interval, lookback)\n\n    df = pd.DataFrame(klines, columns=[\n        \"timestamp\", \"open\", \"high\", \"low\", \"close\", \"volume\",\n        \"close_time\", \"quote_asset_volume\", \"number_of_trades\",\n        \"taker_buy_base_vol\", \"taker_buy_quote_vol\", \"ignore\"\n    ])\n\n    df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"], unit=\"ms\")\n    df.set_index(\"timestamp\", inplace=True)\n    df = df[[\"open\", \"high\", \"low\", \"close\", \"volume\"]].astype(float)\n    return df\n\ndf = get_binance_data()\ndf.head()","metadata":{},"outputs":[],"execution_count":null},{"id":"9f190310","cell_type":"markdown","source":"## **3. Advanced Technical Analysis**\n\nWe'll apply a robust set of technical indicators using `pandas_ta` to enhance our analysis.","metadata":{}},{"id":"2886366b","cell_type":"code","source":"def analyze_market(df):\n    df.ta.strategy(\"All\")  # Apply all available indicators\n    df.dropna(inplace=True)\n    return df\n\ndf = analyze_market(df)\ndf.tail()","metadata":{},"outputs":[],"execution_count":null},{"id":"a6ca7428","cell_type":"markdown","source":"## **4. AI-Based Trading with Reinforcement Learning**\n\nWe implement reinforcement learning to make data-driven trading decisions.\n\n### Defining the Trading Environment","metadata":{}},{"id":"d8117dc6","cell_type":"code","source":"class CryptoTradingEnv:\n    def __init__(self, df):\n        self.df = df\n        self.current_step = 0\n        self.action_space = spaces.Discrete(3)  # 0 = Hold, 1 = Buy, 2 = Sell\n        self.observation_space = spaces.Box(low=0, high=1, shape=(df.shape[1],), dtype=np.float32)\n\n    def reset(self):\n        self.current_step = 0\n        return self.df.iloc[self.current_step].values\n\n    def step(self, action):\n        self.current_step += 1\n        reward = self.calculate_reward(action)\n        done = self.current_step >= len(self.df) - 1\n        return self.df.iloc[self.current_step].values, reward, done, {}\n\n    def calculate_reward(self, action):\n        if action == 1:  # Buy\n            return self.df.iloc[self.current_step][\"close\"] - self.df.iloc[self.current_step - 1][\"close\"]\n        elif action == 2:  # Sell\n            return self.df.iloc[self.current_step - 1][\"close\"] - self.df.iloc[self.current_step][\"close\"]\n        else:\n            return 0\n\nenv = CryptoTradingEnv(df)\nmodel = PPO(\"MlpPolicy\", env, verbose=1)\nmodel.learn(total_timesteps=10000)","metadata":{},"outputs":[],"execution_count":null}]}