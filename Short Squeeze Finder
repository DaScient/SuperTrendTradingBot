{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10397718,"sourceType":"datasetVersion","datasetId":6442525},{"sourceId":10397950,"sourceType":"datasetVersion","datasetId":6442687}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"raw","source":"To create an open-source-driven Python script that scrapes the latest cryptocurrency and 24-hour stock markets for Short Squeeze opportunities, we need to utilize data from various market sources, apply technical analysis to detect potential Short Squeeze signals, and display the results in a user-friendly format. The script should calculate potential returns and estimate when the short squeeze is expected to begin based on certain market signals.\n\nHere's an outline of what the script will do:\n\nAnalyze data to detect short squeeze opportunities. A short squeeze typically happens when the price of a stock rises sharply, forcing traders who have bet against the stock (short sellers) to buy shares to cover their positions, further driving the price up. This can be detected by analyzing indicators like:\nShort Interest Ratio: Percentage of shares that are shorted relative to the float.\nPrice Action: Price rising rapidly after consolidation or downward trend.\nVolume: Unusually high volume relative to previous periods.\nDisplay the results: List out potential short squeeze candidates, their expected return, and an estimated time when the squeeze could occur based on historical patterns.","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"from IPython.display import clear_output\n!pip install yfinance pandas\n!pip install schedule\n!pip install config\nclear_output()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-14T23:38:11.371055Z","iopub.execute_input":"2025-01-14T23:38:11.371470Z","iopub.status.idle":"2025-01-14T23:38:26.450830Z","shell.execute_reply.started":"2025-01-14T23:38:11.371417Z","shell.execute_reply":"2025-01-14T23:38:26.449282Z"},"_kg_hide-input":true},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport matplotlib.pyplot as plt\n\n# Function to retrieve stock data\ndef get_stock_data(ticker, start_date, end_date):\n    stock_data = yf.download(ticker, start=start_date, end=end_date)\n    return stock_data\n\n# Function to calculate short squeeze indicators\ndef calculate_short_squeeze_indicators(stock_data):\n    try:\n        # Calculate daily returns\n        stock_data['Daily Return'] = stock_data['Adj Close'].pct_change()\n        \n        # Calculate the moving average of volume over the past 20 days\n        stock_data['Volume MA'] = stock_data['Volume'].rolling(window=20).mean()\n    \n        # Calculate the average price over the past 20 days\n        stock_data['Price MA'] = stock_data['Adj Close'].rolling(window=20).mean()\n    \n        # Identify if a short squeeze is happening based on these factors\n        stock_data['Potential Squeeze'] = (stock_data['Daily Return'] > 0.05) & \\\n                                          (stock_data['Volume'] > stock_data['Volume MA'] * 1.5) & \\\n                                          (stock_data['Adj Close'] > stock_data['Price MA'] * 1.1)\n    except:\n        pass\n    return stock_data\n\n# Function to identify stocks with potential short squeeze\ndef identify_short_squeeze_stocks(tickers):\n    today = datetime.date.today()\n    start_date = (today - datetime.timedelta(days=365)).strftime('%Y-%m-%d')  # 1-year data\n\n    short_squeeze_stocks = []\n    \n    for ticker in tickers:\n        try:\n            stock_data = get_stock_data(ticker, start_date, today)\n        except:\n            pass\n        \n        try:\n            if stock_data.empty:\n                continue\n        except:pass\n        \n        try:\n            stock_data_with_indicators = calculate_short_squeeze_indicators(stock_data)\n        except:\n            pass\n        \n        try:\n        \n            # Check for the most recent short squeeze signal\n            if stock_data_with_indicators['Potential Squeeze'].iloc[-1]:\n                short_squeeze_stocks.append({\n                    'Ticker': ticker,\n                    'Recent Price': stock_data_with_indicators['Adj Close'].iloc[-1],\n                    'Recent Volume': stock_data_with_indicators['Volume'].iloc[-1],\n                    'Daily Return': stock_data_with_indicators['Daily Return'].iloc[-1],\n                    'Volume MA': stock_data_with_indicators['Volume MA'].iloc[-1],\n                    'Price MA': stock_data_with_indicators['Price MA'].iloc[-1],\n                    'Short Squeeze': True\n                })\n        except:\n            pass        \n    return short_squeeze_stocks\n\n# List of tickers to analyze\n# takes too long \n#tickers = pd.read_csv(\"/kaggle/input/tickers-stocks/stock_info.csv\").Ticker.values.tolist()\n\ntickers = pd.read_csv(\"/kaggle/input/tickers-stock-market-amex/tickers.csv\").values.tolist()\n\n# Identify short squeeze opportunities\nshort_squeeze_opportunities = identify_short_squeeze_stocks(tickers)\n\n# Display results\nif short_squeeze_opportunities:\n    df = pd.DataFrame(short_squeeze_opportunities)\n    print(\"Short Squeeze Opportunities Detected:\")\n    print(df)\nelse:\n    print(\"No short squeeze opportunities detected at this time.\")\nclear_output()","metadata":{"trusted":true,"_kg_hide-input":true,"execution":{"iopub.status.busy":"2025-01-14T23:38:26.452201Z","iopub.execute_input":"2025-01-14T23:38:26.452540Z","iopub.status.idle":"2025-01-14T23:39:07.012494Z","shell.execute_reply.started":"2025-01-14T23:38:26.452512Z","shell.execute_reply":"2025-01-14T23:39:07.011428Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"print(f\"Short Squeezes For {datetime.date.today()}\")\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-14T23:39:07.013899Z","iopub.execute_input":"2025-01-14T23:39:07.014327Z","iopub.status.idle":"2025-01-14T23:39:07.034288Z","shell.execute_reply.started":"2025-01-14T23:39:07.014274Z","shell.execute_reply":"2025-01-14T23:39:07.032871Z"},"_kg_hide-input":true},"outputs":[{"name":"stdout","text":"Short Squeezes For 2025-01-14\n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   Ticker  Recent Price  Recent Volume  Daily Return  Volume MA  Price MA  \\\n0  [AZTR]         0.575       32823700      0.597222  1978125.0   0.43245   \n1   [CVU]         4.990         249600      0.163170    63065.0   4.10600   \n2  [EONR]         1.130        7742100      0.228261  4930180.0   0.73710   \n3  [HUSA]         1.870        1964300      0.113095   452090.0   1.37850   \n4  [KAPA]         2.130      113544300      1.195876  5783515.0   1.58950   \n\n   Short Squeeze  \n0           True  \n1           True  \n2           True  \n3           True  \n4           True  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Ticker</th>\n      <th>Recent Price</th>\n      <th>Recent Volume</th>\n      <th>Daily Return</th>\n      <th>Volume MA</th>\n      <th>Price MA</th>\n      <th>Short Squeeze</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>[AZTR]</td>\n      <td>0.575</td>\n      <td>32823700</td>\n      <td>0.597222</td>\n      <td>1978125.0</td>\n      <td>0.43245</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>[CVU]</td>\n      <td>4.990</td>\n      <td>249600</td>\n      <td>0.163170</td>\n      <td>63065.0</td>\n      <td>4.10600</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>[EONR]</td>\n      <td>1.130</td>\n      <td>7742100</td>\n      <td>0.228261</td>\n      <td>4930180.0</td>\n      <td>0.73710</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>[HUSA]</td>\n      <td>1.870</td>\n      <td>1964300</td>\n      <td>0.113095</td>\n      <td>452090.0</td>\n      <td>1.37850</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>[KAPA]</td>\n      <td>2.130</td>\n      <td>113544300</td>\n      <td>1.195876</td>\n      <td>5783515.0</td>\n      <td>1.58950</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"markdown","source":"# Notification","metadata":{"_kg_hide-input":true}},{"cell_type":"code","source":"import schedule,warnings,time,ast,config,sys,random,smtplib,datetime\nclear_output()\nCARRIERS = {\"att\": \"@mms.att.net\",\"tmobile\": \"@tmomail.net\",\"verizon\": \"@vtext.com\",\"sprint\": \"@messaging.sprintpcs.com\"}\nEMAIL = \"aristocles24@gmail.com\"\nPASSWORD = \"vfvv ingo zjom duzo\"\ndef send_message(phone_number, carrier, message):\n    recipient = phone_number + CARRIERS[carrier]\n    auth = (EMAIL, PASSWORD)\n    server = smtplib.SMTP(\"smtp.gmail.com\", 587)\n    server.starttls()\n    server.login(auth[0], auth[1])\n    server.sendmail(auth[0], recipient, message)\n\nsms=print(df.sort_values('Recent Price',ascending=True).reset_index(drop=True).drop(columns=['Short Squeeze']))\n\ndef wake_up_wake_up():\n    print(\"\\nShort Squeezes Baby\")\n    send_message(\"3016750611\",\"tmobile\",sms)\n    send_message(\"5626813383\",\"verizon\",sms)\n    print(\"\\nSMS Sent to Recipients.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-14T23:39:07.035928Z","iopub.execute_input":"2025-01-14T23:39:07.036444Z","iopub.status.idle":"2025-01-14T23:39:07.068705Z","shell.execute_reply.started":"2025-01-14T23:39:07.036409Z","shell.execute_reply":"2025-01-14T23:39:07.067421Z"},"_kg_hide-input":true},"outputs":[{"name":"stdout","text":"   Ticker  Recent Price  Recent Volume  Daily Return  Volume MA  Price MA\n0  [AZTR]         0.575       32823700      0.597222  1978125.0   0.43245\n1  [EONR]         1.130        7742100      0.228261  4930180.0   0.73710\n2  [HUSA]         1.870        1964300      0.113095   452090.0   1.37850\n3  [KAPA]         2.130      113544300      1.195876  5783515.0   1.58950\n4   [CVU]         4.990         249600      0.163170    63065.0   4.10600\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"# en fin","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-14T23:39:07.069843Z","iopub.execute_input":"2025-01-14T23:39:07.070242Z","iopub.status.idle":"2025-01-14T23:39:07.075566Z","shell.execute_reply.started":"2025-01-14T23:39:07.070211Z","shell.execute_reply":"2025-01-14T23:39:07.074274Z"}},"outputs":[],"execution_count":5}]}