{
 "cells": [
  {
   "cell_type": "raw",
   "id": "e3c70978",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "papermill": {
     "duration": 0.003598,
     "end_time": "2025-01-19T02:30:22.063526",
     "exception": false,
     "start_time": "2025-01-19T02:30:22.059928",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "To create an open-source-driven Python script that scrapes the latest cryptocurrency and 24-hour stock markets for Short Squeeze opportunities, we need to utilize data from various market sources, apply technical analysis to detect potential Short Squeeze signals, and display the results in a user-friendly format. The script should calculate potential returns and estimate when the short squeeze is expected to begin based on certain market signals.\n",
    "\n",
    "Here's an outline of what the script will do:\n",
    "\n",
    "Analyze data to detect short squeeze opportunities. A short squeeze typically happens when the price of a stock rises sharply, forcing traders who have bet against the stock (short sellers) to buy shares to cover their positions, further driving the price up. This can be detected by analyzing indicators like:\n",
    "Short Interest Ratio: Percentage of shares that are shorted relative to the float.\n",
    "Price Action: Price rising rapidly after consolidation or downward trend.\n",
    "Volume: Unusually high volume relative to previous periods.\n",
    "Display the results: List out potential short squeeze candidates, their expected return, and an estimated time when the squeeze could occur based on historical patterns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "579498d5",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2025-01-19T02:30:22.071457Z",
     "iopub.status.busy": "2025-01-19T02:30:22.070909Z",
     "iopub.status.idle": "2025-01-19T02:30:39.264519Z",
     "shell.execute_reply": "2025-01-19T02:30:39.263208Z"
    },
    "papermill": {
     "duration": 17.201005,
     "end_time": "2025-01-19T02:30:39.267674",
     "exception": false,
     "start_time": "2025-01-19T02:30:22.066669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from IPython.display import clear_output\n",
    "!pip install yfinance pandas\n",
    "!pip install schedule\n",
    "!pip install config\n",
    "clear_output()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e9be13d9",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2025-01-19T02:30:39.275890Z",
     "iopub.status.busy": "2025-01-19T02:30:39.275493Z",
     "iopub.status.idle": "2025-01-19T02:31:35.304778Z",
     "shell.execute_reply": "2025-01-19T02:31:35.303076Z"
    },
    "papermill": {
     "duration": 56.035743,
     "end_time": "2025-01-19T02:31:35.307060",
     "exception": false,
     "start_time": "2025-01-19T02:30:39.271317",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Function to retrieve stock data\n",
    "def get_stock_data(ticker, start_date, end_date):\n",
    "    stock_data = yf.download(ticker, start=start_date, end=end_date)\n",
    "    return stock_data\n",
    "\n",
    "# Function to calculate short squeeze indicators\n",
    "def calculate_short_squeeze_indicators(stock_data):\n",
    "    try:\n",
    "        # Calculate daily returns\n",
    "        stock_data['Daily Return'] = stock_data['Adj Close'].pct_change()\n",
    "        \n",
    "        # Calculate the moving average of volume over the past 20 days\n",
    "        stock_data['Volume MA'] = stock_data['Volume'].rolling(window=23).mean()\n",
    "    \n",
    "        # Calculate the average price over the past 20 days\n",
    "        stock_data['Price MA'] = stock_data['Adj Close'].rolling(window=23).mean()\n",
    "    \n",
    "        # Identify if a short squeeze is happening based on these factors\n",
    "        stock_data['Potential Squeeze'] = (stock_data['Daily Return'] > 0.0618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137484754088075386891752126633862223536931793180060766726354433389086595939582905638322661319928290267880675208766892501711696207032221043216269548626296313614438149758701220340805887954454749246185695364864449241044320771344947049565846788509874339442212544877066478091588460749988712400765217057517978834166256249407589069704000281210427621771117778053153171410117046665991466979873176135600670874807101317952368942752194843530567830022878569978297783478458782289110976250030269615617002504643382437764861028383126833037242926752631165339247316711121158818638513316203840052221657912866752946549068113171599343235973494985090409476213222981017261070596116456299098162905552085247903524060201727997471753427775927786256194320827505131218156285512224809394712341451702237358057727861600868838295230459264787801788992199027077690389532196819861514378031499741106926088674296226757560523172777520353613936210767389376455606060592165894667595519004005559089502295309423124823552122124154440064703405657347976639723949499465845788730396230903750339938562102423690251386804145779956981224457471780341731264532204163972321340) & \\\n",
    "                                          (stock_data['Volume'] > stock_data['Volume MA'] * 1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137484754088075386891752126633862223536931793180060766726354433389086595939582905638322661319928290267880675208766892501711696207032221043216269548626296313614438149758701220340805887954454749246185695364864449241044320771344947049565846788509874339442212544877066478091588460749988712400765217057517978834166256249407589069704000281210427621771117778053153171410117046665991466979873176135600670874807101317952368942752194843530567830022878569978297783478458782289110976250030269615617002504643382437764861028383126833037242926752631165339247316711121158818638513316203840052221657912866752946549068113171599343235973494985090409476213222981017261070596116456299098162905552085247903524060201727997471753427775927786256194320827505131218156285512224809394712341451702237358057727861600868838295230459264787801788992199027077690389532196819861514378031499741106926088674296226757560523172777520353613936210767389376455606060592165894667595519004005559089502295309423124823552122124154440064703405657347976639723949499465845788730396230903750339938562102423690251386804145779956981224457471780341731264532204163972321340) & \\\n",
    "                                          (stock_data['Adj Close'] > stock_data['Price MA'] * 1.1111131111131111133131131313311313111113313113131331131311111331311313133113131111133131131313311313311313131313)\n",
    "    except:\n",
    "        pass\n",
    "    return stock_data\n",
    "\n",
    "# Function to identify stocks with potential short squeeze\n",
    "def identify_short_squeeze_stocks(tickers):\n",
    "    today = datetime.date.today()\n",
    "    start_date = (today - datetime.timedelta(days=365.24218966)).strftime('%Y-%m-%d')  # 1-year data\n",
    "\n",
    "    short_squeeze_stocks = []\n",
    "    \n",
    "    for ticker in tickers:\n",
    "        try:\n",
    "            stock_data = get_stock_data(ticker, start_date, today)\n",
    "        except:\n",
    "            pass\n",
    "        \n",
    "        try:\n",
    "            if stock_data.empty:\n",
    "                continue\n",
    "        except:pass\n",
    "        \n",
    "        try:\n",
    "            stock_data_with_indicators = calculate_short_squeeze_indicators(stock_data)\n",
    "        except:\n",
    "            pass\n",
    "        \n",
    "        try:\n",
    "        \n",
    "            # Check for the most recent short squeeze signal\n",
    "            if stock_data_with_indicators['Potential Squeeze'].iloc[-1]:\n",
    "                short_squeeze_stocks.append({\n",
    "                    'Ticker': ticker,\n",
    "                    'Recent Price': stock_data_with_indicators['Adj Close'].iloc[-1],\n",
    "                    'Recent Volume': stock_data_with_indicators['Volume'].iloc[-1],\n",
    "                    'Daily Return': stock_data_with_indicators['Daily Return'].iloc[-1],\n",
    "                    'Volume MA': stock_data_with_indicators['Volume MA'].iloc[-1],\n",
    "                    'Price MA': stock_data_with_indicators['Price MA'].iloc[-1],\n",
    "                    'Short Squeeze': True\n",
    "                })\n",
    "        except:\n",
    "            pass        \n",
    "    return short_squeeze_stocks\n",
    "\n",
    "# List of tickers to analyze\n",
    "# takes too long \n",
    "# tickers = pd.read_csv(\"/kaggle/input/tickers-stocks/stock_info.csv\",header=None).values.tolist()\n",
    "\n",
    "\n",
    "tickers = pd.read_csv(\"/kaggle/input/tickers-stock-market-amex/tickers.csv\").values.tolist()\n",
    "\n",
    "# Identify short squeeze opportunities\n",
    "short_squeeze_opportunities = identify_short_squeeze_stocks(tickers)\n",
    "\n",
    "# Display results\n",
    "if short_squeeze_opportunities:\n",
    "    df = pd.DataFrame(short_squeeze_opportunities).head()\n",
    "    print(\"Short Squeeze Opportunities Detected:\")\n",
    "    print(df)\n",
    "else:\n",
    "    print(\"No short squeeze opportunities detected at this time.\")\n",
    "clear_output()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cbcd6e6a",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2025-01-19T02:31:35.314733Z",
     "iopub.status.busy": "2025-01-19T02:31:35.314364Z",
     "iopub.status.idle": "2025-01-19T02:31:35.334582Z",
     "shell.execute_reply": "2025-01-19T02:31:35.333104Z"
    },
    "papermill": {
     "duration": 0.026102,
     "end_time": "2025-01-19T02:31:35.336576",
     "exception": false,
     "start_time": "2025-01-19T02:31:35.310474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Short Squeezes For 2025-01-19\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ticker</th>\n",
       "      <th>Recent Price</th>\n",
       "      <th>Recent Volume</th>\n",
       "      <th>Daily Return</th>\n",
       "      <th>Volume MA</th>\n",
       "      <th>Price MA</th>\n",
       "      <th>Short Squeeze</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[CHRO]</td>\n",
       "      <td>1.900</td>\n",
       "      <td>14190200</td>\n",
       "      <td>0.979167</td>\n",
       "      <td>748782.608696</td>\n",
       "      <td>0.796826</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[PZG]</td>\n",
       "      <td>0.398</td>\n",
       "      <td>207400</td>\n",
       "      <td>0.105556</td>\n",
       "      <td>101704.347826</td>\n",
       "      <td>0.351000</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[USAS]</td>\n",
       "      <td>0.500</td>\n",
       "      <td>1902600</td>\n",
       "      <td>0.063830</td>\n",
       "      <td>628521.739130</td>\n",
       "      <td>0.409130</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[VINE]</td>\n",
       "      <td>0.690</td>\n",
       "      <td>375200</td>\n",
       "      <td>0.229947</td>\n",
       "      <td>148182.608696</td>\n",
       "      <td>0.608043</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Ticker  Recent Price  Recent Volume  Daily Return      Volume MA  Price MA  \\\n",
       "0  [CHRO]         1.900       14190200      0.979167  748782.608696  0.796826   \n",
       "1   [PZG]         0.398         207400      0.105556  101704.347826  0.351000   \n",
       "2  [USAS]         0.500        1902600      0.063830  628521.739130  0.409130   \n",
       "3  [VINE]         0.690         375200      0.229947  148182.608696  0.608043   \n",
       "\n",
       "   Short Squeeze  \n",
       "0           True  \n",
       "1           True  \n",
       "2           True  \n",
       "3           True  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(f\"Short Squeezes For {datetime.date.today()}\")\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d03c1402",
   "metadata": {
    "_kg_hide-input": true,
    "papermill": {
     "duration": 0.002718,
     "end_time": "2025-01-19T02:31:35.342855",
     "exception": false,
     "start_time": "2025-01-19T02:31:35.340137",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Notification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5152613e",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2025-01-19T02:31:35.350554Z",
     "iopub.status.busy": "2025-01-19T02:31:35.350002Z",
     "iopub.status.idle": "2025-01-19T02:31:35.385465Z",
     "shell.execute_reply": "2025-01-19T02:31:35.383850Z"
    },
    "papermill": {
     "duration": 0.04187,
     "end_time": "2025-01-19T02:31:35.387736",
     "exception": false,
     "start_time": "2025-01-19T02:31:35.345866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EMAIL = \"existentialkingdom@gmail.com\"\n",
      "PASSWORD = \"vfvv ingo zjom duzo\"\n",
      "   Ticker  Recent Price  Recent Volume  Daily Return      Volume MA  Price MA\n",
      "0   [PZG]         0.398         207400      0.105556  101704.347826  0.351000\n",
      "1  [USAS]         0.500        1902600      0.063830  628521.739130  0.409130\n",
      "2  [VINE]         0.690         375200      0.229947  148182.608696  0.608043\n",
      "3  [CHRO]         1.900       14190200      0.979167  748782.608696  0.796826\n"
     ]
    }
   ],
   "source": [
    "import schedule,warnings,time,ast,config,sys,random,smtplib,datetime\n",
    "clear_output()\n",
    "CARRIERS = {\"att\": \"@mms.att.net\",\"tmobile\": \"@tmomail.net\",\"verizon\": \"@vtext.com\",\"sprint\": \"@messaging.sprintpcs.com\"}\n",
    "\n",
    "# email-password mappings & randomizer\n",
    "email_passwords =  {\"aristocles24@gmail.com\": [\"vfvv ingo zjom duzo\",\"mwug tyxy ircx xgbk\",\"fyrs ciyw iwyd amaz\"],\n",
    "                    \"existentialkingdom@gmail.com\": [\"vfvv ingo zjom duzo\",\"bjgm iqhf nkle wskn\",\"hxep heai vbwd jffj\"]}\n",
    "\n",
    "# email-password randomizer\n",
    "def get_random_email_password():\n",
    "    \"\"\"Randomly selects an email and a corresponding password.\"\"\"\n",
    "    # Randomly select an email\n",
    "    email = random.choice(list(email_passwords.keys()))\n",
    "    # Randomly select a password for the chosen email\n",
    "    password = random.choice(email_passwords[email])\n",
    "    return email, password\n",
    "# Generate a random email-password pair\n",
    "EMAIL, PASSWORD = get_random_email_password()\n",
    "\n",
    "# Output the selected pair\n",
    "print(f\"EMAIL = \\\"{EMAIL}\\\"\")\n",
    "print(f\"PASSWORD = \\\"{PASSWORD}\\\"\")\n",
    "\n",
    "def send_message(phone_number, carrier, message):\n",
    "    recipient = phone_number + CARRIERS[carrier]\n",
    "    auth = (EMAIL, PASSWORD)\n",
    "    server = smtplib.SMTP(\"smtp.gmail.com\", 587)\n",
    "    server.starttls()\n",
    "    server.login(auth[0], auth[1])\n",
    "    server.sendmail(auth[0], recipient, message)\n",
    "sms=print(df.sort_values('Recent Price',ascending=True).reset_index(drop=True).drop(columns=['Short Squeeze']))\n",
    "\n",
    "def wake_up_wake_up():\n",
    "    print(\"\\nShort Squeezes Baby\")\n",
    "    send_message(\"3016750611\",\"tmobile\",sms)\n",
    "    send_message(\"4809302330\",\"tmobile\",sms)\n",
    "    print(\"\\nSMS Sent to Recipients.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1fe7fa14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T02:31:35.396574Z",
     "iopub.status.busy": "2025-01-19T02:31:35.396173Z",
     "iopub.status.idle": "2025-01-19T02:31:35.400686Z",
     "shell.execute_reply": "2025-01-19T02:31:35.399496Z"
    },
    "papermill": {
     "duration": 0.011765,
     "end_time": "2025-01-19T02:31:35.402891",
     "exception": false,
     "start_time": "2025-01-19T02:31:35.391126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# en fin"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6442525,
     "sourceId": 10397718,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6442687,
     "sourceId": 10397950,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30822,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 78.691246,
   "end_time": "2025-01-19T02:31:36.232301",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-19T02:30:17.541055",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
